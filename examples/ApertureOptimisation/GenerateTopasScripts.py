from pathlib import Path

def GenerateTopasScripts(BaseDirectory, iteration, **vars):
    """
    This file simply returns a list object, where each list entry corresponds to
    a line in the topas script.
    When it is called from an Optimiser object,it will receive a dictionary that contains the current values of 
    the variables you set up in optimisation_params when you initialised the optimiser.
    """
    
    SimpleCollimator = []
    SimpleCollimator.append('# Set threading self:')
    SimpleCollimator.append('------------------------------------------------------------')
    SimpleCollimator.append('i:Ts/NumberOfThreads = 0  ')
    SimpleCollimator.append('i:Ts/ShowHistoryCountAtInterval = 10000000')
    SimpleCollimator.append('b:Ts/ShowHistoryCountOnSingleLine = "True"')
    SimpleCollimator.append('')
    SimpleCollimator.append('# Define collimator')
    SimpleCollimator.append('------------------------------------------------------------')
    SimpleCollimator.append('s:Ge/Collimator/Type                = "TsCylinder"')
    SimpleCollimator.append('s:Ge/Collimator/Parent              = "World"')
    SimpleCollimator.append('s:Ge/Collimator/Material            = "G4_W"')
    SimpleCollimator.append('d:Ge/Collimator/TransX              = 0 cm')
    SimpleCollimator.append('d:Ge/Collimator/TransY              = 0 cm')
    SimpleCollimator.append('d:Ge/Collimator/TransZ              = 650 mm')
    SimpleCollimator.append('d:Ge/Collimator/RMin                = ' + str(vars['AppertureSize']) + ' mm')
    SimpleCollimator.append('d:Ge/Collimator/RMax                = 50 mm')
    SimpleCollimator.append('d:Ge/Collimator/HL                  = 50 mm')
    SimpleCollimator.append('s:Ge/Collimator/DrawingStyle        = "solid"')
    SimpleCollimator.append('')
    SimpleCollimator.append('# Add World:')
    SimpleCollimator.append('------------------------------------------------------------')
    SimpleCollimator.append('s:Ge/World/Type = "TsBox"')
    SimpleCollimator.append('s:Ge/World/Material = "Vacuum"')
    SimpleCollimator.append('d:Ge/World/HLX = 250 mm ')
    SimpleCollimator.append('d:Ge/World/HLY = 250 mm')
    SimpleCollimator.append('d:Ge/World/HLZ = 1000.0 mm')
    SimpleCollimator.append('d:Ge/World/RotX = 0. deg')
    SimpleCollimator.append('d:Ge/World/RotY = 0. deg')
    SimpleCollimator.append('d:Ge/World/RotZ = 0. deg')
    SimpleCollimator.append('')
    SimpleCollimator.append('# Beam parameters (paramterised source):')
    SimpleCollimator.append('------------------------------------------------------------')
    SimpleCollimator.append('s:So/Beam/Type                     = "Beam"')
    SimpleCollimator.append('sc:So/Beam/Component                = "ElectronSource"')
    SimpleCollimator.append('sc:So/Beam/BeamParticle             = "e-"')
    SimpleCollimator.append('dc:So/Beam/BeamEnergy               = 10.0 MeV')
    SimpleCollimator.append('uc:So/Beam/BeamEnergySpread         = 0')
    SimpleCollimator.append('sc:So/Beam/BeamPositionDistribution = "Gaussian" ')
    SimpleCollimator.append('sc:So/Beam/BeamAngularDistribution  = "Gaussian" ')
    SimpleCollimator.append('sc:So/Beam/BeamPositionCutoffShape = "Ellipse"')
    SimpleCollimator.append('dc:So/Beam/BeamPositionCutoffX = 1 mm')
    SimpleCollimator.append('dc:So/Beam/BeamPositionCutoffY = 1 mm')
    SimpleCollimator.append('dc:So/Beam/BeamPositionSpreadX = 0.3 mm')
    SimpleCollimator.append('dc:So/Beam/BeamPositionSpreadY = 0.3 mm')
    SimpleCollimator.append('dc:So/Beam/BeamAngularCutoffX = 5 deg')
    SimpleCollimator.append('dc:So/Beam/BeamAngularCutoffY = 5 deg')
    SimpleCollimator.append('dc:So/Beam/BeamAngularSpreadX = 0.07 deg')
    SimpleCollimator.append('dc:So/Beam/BeamAngularSpreadY = 0.07 deg')
    SimpleCollimator.append('ic:So/Beam/NumberOfHistoriesInRun = 10000')
    SimpleCollimator.append('')
    SimpleCollimator.append('')
    SimpleCollimator.append('# Electron source position')
    SimpleCollimator.append('------------------------------------------------------------')
    SimpleCollimator.append('s:Ge/ElectronSource/Parent = "World"')
    SimpleCollimator.append('s:Ge/ElectronSource/Type="Group"')
    SimpleCollimator.append('d:Ge/ElectronSource/TransZ = 800 mm')
    SimpleCollimator.append('d:Ge/ElectronSource/RotX = 180. deg')
    SimpleCollimator.append('s:Ge/ElectronSource/Material = Ge/World/Material')
    SimpleCollimator.append('s:Ge/ElectronSource/Color = "yellow"')
    SimpleCollimator.append('sc:Ge/ElectronSource/DrawingStyle = "Solid"')
    SimpleCollimator.append('')
    SimpleCollimator.append('Target')
    SimpleCollimator.append('------------------------------------------------------------')
    SimpleCollimator.append('# Target is implemented as a separate component from the TsApertureArray')
    SimpleCollimator.append('# so that one can independently score on it')
    SimpleCollimator.append('# But all of its parameters are derived from Sphinx parameters above')
    SimpleCollimator.append('s:Ge/Target/Type 			= "TsCylinder"')
    SimpleCollimator.append('s:Ge/Target/Parent 			= "World"')
    SimpleCollimator.append('s:Ge/Target/Material 			= "G4_W"')
    SimpleCollimator.append('d:Ge/Target/RMax   			= 50 mm')
    SimpleCollimator.append('d:Ge/Target/HL  			= 2 mm')
    SimpleCollimator.append('d:Ge/Target/TransZ 			= 703 mm')
    SimpleCollimator.append('sc:Ge/Target/DrawingStyle 		= "Solid"')
    SimpleCollimator.append('sc:Ge/Target/Color 			= "magenta"')
    SimpleCollimator.append('')
    SimpleCollimator.append('Variance reduction in target')
    SimpleCollimator.append('------------------------------------------------------------')
    SimpleCollimator.append('b:Vr/UseVarianceReduction = "true"')
    SimpleCollimator.append('s:Ge/Target/AssignToRegionNamed = "VarianceReduction"')
    SimpleCollimator.append('s:Vr/ParticleSplit/Type = "SecondaryBiasing"')
    SimpleCollimator.append('sv:Vr/ParticleSplit/ForRegion/VarianceReduction/ProcessesNamed = 1 "eBrem"')
    SimpleCollimator.append('uv:Vr/ParticleSplit/ForRegion/VarianceReduction/SplitNumber = 1 1000')
    SimpleCollimator.append('# why would I not want to split all particles?')
    SimpleCollimator.append('dv:Vr/ParticleSplit/ForRegion/VarianceReduction/MaximumEnergies = 1 10.0 MeV')
    SimpleCollimator.append('s:Vr/ParticleSplit/ReferenceComponent = "Target"')
    SimpleCollimator.append('dv:Vr/ParticleSplit/ForRegion/VarianceReduction/DirectionalSplitLimits = 1 -1 * Ge/Target/TransZ mm')
    SimpleCollimator.append('dv:Vr/ParticleSplit/ForRegion/VarianceReduction/DirectionalSplitRadius = 1 100 mm')
    SimpleCollimator.append('')
    SimpleCollimator.append('')
    SimpleCollimator.append('# Add phase space scorer below collimator:')
    SimpleCollimator.append('------------------------------------------------------------')
    SimpleCollimator.append('s:Ge/Magic/Type     = "TsBox"')
    SimpleCollimator.append('s:Ge/Magic/Parent   = "World"')
    SimpleCollimator.append('s:Ge/Magic/Material = "Vacuum"')
    SimpleCollimator.append('d:Ge/Magic/HLX      = Ge/Collimator/RMax mm')
    SimpleCollimator.append('d:Ge/Magic/HLY      = Ge/Collimator/RMax mm')
    SimpleCollimator.append('d:Ge/Magic/HLZ      = 1 mm')
    SimpleCollimator.append('d:Ge/Magic/TransX   = 0. cm')
    SimpleCollimator.append('d:Ge/Magic/TransY   = 0. cm')
    SimpleCollimator.append('d:Ge/Magic/TransZ   = 580 mm')
    SimpleCollimator.append('d:Ge/Magic/RotX     = 0. deg')
    SimpleCollimator.append('d:Ge/Magic/RotY     = 0. deg')
    SimpleCollimator.append('d:Ge/Magic/RotZ     = 0. deg')
    SimpleCollimator.append('s:Ge/Magic/Color    = "skyblue"')
    SimpleCollimator.append('s:Ge/Magic/DrawingStyle = "wireframe"')
    SimpleCollimator.append('')
    SimpleCollimator.append('')
    SimpleCollimator.append('s:Sc/PhaseSpaceFromColl/Quantity                    = "PhaseSpace"')
    SimpleCollimator.append('b:Sc/PhaseSpaceFromColl/OutputToConsole             = "False"')
    SimpleCollimator.append('s:Sc/PhaseSpaceFromColl/Surface                     = "Magic/ZMinusSurface"')
    SimpleCollimator.append('s:Sc/PhaseSpaceFromColl/OutputType                  = "Binary" ')
    SimpleCollimator.append('s:Sc/PhaseSpaceFromColl/OutputFile                   =  "../Results/coll_PhaseSpace_itt_' + str(iteration) + '"')
    SimpleCollimator.append('i:Sc/PhaseSpaceFromColl/OutputBufferSize            = 1000')
    SimpleCollimator.append('#s:Sc/PhaseSpaceFromColl/OnlyIncludeParticlesGoing  = "In"')
    SimpleCollimator.append('b:Sc/PhaseSpaceFromColl/IncludeTOPASTime            = "False"')
    SimpleCollimator.append('b:Sc/PhaseSpaceFromColl/IncludeTimeOfFlight         = "False"')
    SimpleCollimator.append('b:Sc/PhaseSpaceFromColl/IncludeRunID                = "False"')
    SimpleCollimator.append('b:Sc/PhaseSpaceFromColl/IncludeEventID              = "False"')
    SimpleCollimator.append('b:Sc/PhaseSpaceFromColl/IncludeTrackID              = "False"')
    SimpleCollimator.append('b:Sc/PhaseSpaceFromColl/IncludeParentID             = "False"')
    SimpleCollimator.append('b:Sc/PhaseSpaceFromColl/IncludeCreatorProcess       = "False"')
    SimpleCollimator.append('b:Sc/PhaseSpaceFromColl/IncludeVertexInfo           = "False"')
    SimpleCollimator.append('b:Sc/PhaseSpaceFromColl/IncludeSeed                 = "False"')
    SimpleCollimator.append('s:Sc/PhaseSpaceFromColl/IfOutputFileAlreadyExists   = "Overwrite"')
    SimpleCollimator.append('')
    SimpleCollimator.append('')
    SimpleCollimator.append('# Graphics View and trajectory filters:')
    SimpleCollimator.append('------------------------------------------------------------')
    SimpleCollimator.append('b:Gr/Enable = "False"  ')
    SimpleCollimator.append('s:Gr/ViewA/Type              = "OpenGL"')
    SimpleCollimator.append('d:Gr/ViewA/Theta            = 90 deg')
    SimpleCollimator.append('d:Gr/ViewA/Phi              = 0 deg')
    SimpleCollimator.append('u:Gr/ViewA/TransX           = 0')
    SimpleCollimator.append('u:Gr/ViewA/TransY           = 0.')
    SimpleCollimator.append('s:Gr/ViewA/Projection       = "Orthogonal"')
    SimpleCollimator.append('d:Gr/ViewA/PerspectiveAngle = 60 deg')
    SimpleCollimator.append('u:Gr/ViewA/Zoom             = 1')
    SimpleCollimator.append('b:Gr/ViewA/IncludeStepPoints = "False"')
    SimpleCollimator.append('b:Gr/ViewA/HiddenLineRemovalForTrajectories = "True"')
    SimpleCollimator.append('sv:Gr/OnlyIncludeParticlesNamed = 1 "gamma"')
    SimpleCollimator.append('')
    SimpleCollimator.append('# Physics')
    SimpleCollimator.append('------------------------------------------------------------')
    SimpleCollimator.append('sv:Ph/Default/Modules = 1 "g4em-standard_opt0"')
    SimpleCollimator.append('b:Ph/ListProcesses = "False"')
    SimpleCollimator.append('')
    SimpleCollimator.append('------------------------------------------------------------')
    SimpleCollimator.append('# QT')
    SimpleCollimator.append('# --')
    SimpleCollimator.append('Ts/UseQt = Gr/Enable')
    SimpleCollimator.append('Ts/PauseBeforeQuit = Gr/Enable')
    SimpleCollimator.append('Ts/IncludeDefaultGeant4QtWidgets = "F"')
    
    WaterTank = []
    WaterTank.append('# Set threading self:')
    WaterTank.append('------------------------------------------------------------')
    WaterTank.append('i:Ts/NumberOfThreads = 0  ')
    WaterTank.append('i:Ts/ShowHistoryCountAtInterval = 10000000')
    WaterTank.append('')
    WaterTank.append('')
    WaterTank.append('# Add World:')
    WaterTank.append('------------------------------------------------------------')
    WaterTank.append('s:Ge/World/Type = "TsBox"')
    WaterTank.append('s:Ge/World/Material = "Vacuum"')
    WaterTank.append('d:Ge/World/HLX = 250 mm ')
    WaterTank.append('d:Ge/World/HLY = 250 mm')
    WaterTank.append('d:Ge/World/HLZ = 1000.0 mm')
    WaterTank.append('d:Ge/World/RotX = 0. deg')
    WaterTank.append('d:Ge/World/RotY = 0. deg')
    WaterTank.append('d:Ge/World/RotZ = 0. deg')
    WaterTank.append('')
    WaterTank.append('# Add phase space scorer below collimator:')
    WaterTank.append('------------------------------------------------------------')
    WaterTank.append('s:Ge/Magic/Type     = "TsBox"')
    WaterTank.append('s:Ge/Magic/Parent   = "World"')
    WaterTank.append('s:Ge/Magic/Material = "Vacuum"')
    WaterTank.append('d:Ge/Magic/HLX      = 50 mm')
    WaterTank.append('d:Ge/Magic/HLY      = 50 mm')
    WaterTank.append('d:Ge/Magic/HLZ      = 1 mm')
    WaterTank.append('d:Ge/Magic/TransX   = 0. cm')
    WaterTank.append('d:Ge/Magic/TransY   = 0. cm')
    WaterTank.append('d:Ge/Magic/TransZ   = 580 mm')
    WaterTank.append('d:Ge/Magic/RotX     = 0. deg')
    WaterTank.append('d:Ge/Magic/RotY     = 0. deg')
    WaterTank.append('d:Ge/Magic/RotZ     = 0. deg')
    WaterTank.append('s:Ge/Magic/Color    = "skyblue"')
    WaterTank.append('s:Ge/Magic/DrawingStyle = "wireframe"')
    WaterTank.append('')
    WaterTank.append('# Phase Space source:')
    WaterTank.append('------------------------------------------------------------')
    WaterTank.append('s:So/Example/Type                            = "PhaseSpace"')
    WaterTank.append('s:So/Example/PhaseSpaceFileName               =  "../Results/coll_PhaseSpace_itt_' + str(iteration) + '"')
    WaterTank.append('s:So/Example/Component                       = "World"')
    WaterTank.append('i:So/Example/PhaseSpaceMultipleUse          = 100')
    WaterTank.append('b:So/Example/PhaseSpaceIncludeEmptyHistories = "False"')
    WaterTank.append('# i:So/Example/NumberOfHistoriesInRun = 10 # set PhaseSpaceMultipleUse to 0 to enable this option')
    WaterTank.append('')
    WaterTank.append('# Add the phantom')
    WaterTank.append('------------------------------------------------------------')
    WaterTank.append('# Phantom')
    WaterTank.append('s:Ge/Phantom/Type = "TsBox"')
    WaterTank.append('s:Ge/Phantom/Parent = "World"')
    WaterTank.append('sc:Ge/Phantom/Material = "G4_WATER"')
    WaterTank.append('# We draw the phantom to be field size plus one beamlet')
    WaterTank.append('dc:Ge/Phantom/HLX = 75 mm')
    WaterTank.append('dc:Ge/Phantom/HLY = 75 mm')
    WaterTank.append('dc:Ge/Phantom/HLZ =  75 mm')
    WaterTank.append('dc:Ge/Phantom/TransX = 0. cm')
    WaterTank.append('dc:Ge/Phantom/TransY = 0. cm')
    WaterTank.append('dc:Ge/Phantom/TransZ = 0. cm')
    WaterTank.append('dc:Ge/Phantom/RotX = 0. deg')
    WaterTank.append('dc:Ge/Phantom/RotY = 0. deg')
    WaterTank.append('dc:Ge/Phantom/RotZ = 0. deg')
    WaterTank.append('ic:Ge/Phantom/XBins = 30')
    WaterTank.append('ic:Ge/Phantom/YBins = 30')
    WaterTank.append('ic:Ge/Phantom/ZBins = 60')
    WaterTank.append('sc:Ge/Phantom/Color    = "green"')
    WaterTank.append('sc:Ge/Phantom/DrawingStyle = "Solid"')
    WaterTank.append('')
    WaterTank.append('')
    WaterTank.append('# Add Volume scorer to phantom:')
    WaterTank.append('------------------------------------------------------------')
    WaterTank.append('s:Sc/PhantomScorer/Component = "Phantom"')
    WaterTank.append('s:Sc/PhantomScorer/Material = "Water"')
    WaterTank.append('s:Sc/PhantomScorer/Quantity                  = "DoseToMedium"')
    WaterTank.append('b:Sc/PhantomScorer/OutputToConsole           = "FALSE"')
    WaterTank.append('s:Sc/PhantomScorer/IfOutputFileAlreadyExists = "Overwrite"')
    WaterTank.append('s:Sc/PhantomScorer/OutputType = "Binary" ')
    WaterTank.append('s:Sc/PhantomScorer/OutputFile                   =  "../Results/WaterTank_itt_' + str(iteration) + '"')
    WaterTank.append('')
    WaterTank.append('')
    WaterTank.append('# Graphics View and trajectory filters:')
    WaterTank.append('------------------------------------------------------------')
    WaterTank.append('b:Gr/Enable = "False"  ')
    WaterTank.append('s:Gr/ViewA/Type              = "OpenGL"')
    WaterTank.append('dc:Gr/ViewA/Theta            = 90 deg')
    WaterTank.append('dc:Gr/ViewA/Phi              = 0 deg')
    WaterTank.append('uc:Gr/ViewA/TransX           = -0.5')
    WaterTank.append('uc:Gr/ViewA/TransY           = 0.')
    WaterTank.append('sc:Gr/ViewA/Projection       = "Orthogonal"')
    WaterTank.append('dc:Gr/ViewA/PerspectiveAngle = 30 deg')
    WaterTank.append('uc:Gr/ViewA/Zoom             = 10')
    WaterTank.append('bc:Gr/ViewA/IncludeStepPoints = "False"')
    WaterTank.append('bc:Gr/ViewA/HiddenLineRemovalForTrajectories = "True"')
    WaterTank.append('# sv:Gr/OnlyIncludeParticlesFromVolume = 1 "ElectronSource" # one or more volume')
    WaterTank.append('# sv:Gr/OnlyIncludeParticlesFromComponentOrSubComponentsOf = 1 "ElectronSource"')
    WaterTank.append('# sv:Gr/OnlyIncludeParticlesFromComponent = 2 "Target" "Sphinx"  # one or more component')
    WaterTank.append('# sv:Gr/OnlyIncludeParticlesFromVolume = 1 "Film1/Film1_Z_Division"')
    WaterTank.append('# sv:Gr/OnlyIncludeParticlesFromComponent = 1 "Film2"')
    WaterTank.append('sv:Gr/OnlyIncludeParticlesFromProcess = 1 "primary"')
    WaterTank.append('')
    WaterTank.append('')
    WaterTank.append('# Physics')
    WaterTank.append('------------------------------------------------------------')
    WaterTank.append('sv:Ph/Default/Modules = 1 "g4em-standard_opt0"')
    WaterTank.append('b:Ph/ListProcesses = "True"')
    WaterTank.append('')
    WaterTank.append('')
    WaterTank.append('------------------------------------------------------------')
    WaterTank.append('# QT')
    WaterTank.append('# --')
    WaterTank.append('Ts/UseQt = Gr/Enable')
    WaterTank.append('Ts/PauseBeforeQuit = Gr/Enable')
    WaterTank.append('Ts/IncludeDefaultGeant4QtWidgets = "T"')

    return [SimpleCollimator, WaterTank], ['SimpleCollimator', 'WaterTank']